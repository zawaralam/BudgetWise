<style>
    body { background-color: #30303d; color: rgb(0, 0, 0); }

    #pieIncome {
        width: 100%;
        height: 500px;
    }

    #pieExpenses {
        width: 100%;
        height: 500px;
    }

    #treeIncome {
        width: 100%;
        height: 500px;
    }

    #treeExpenses {
        width: 100%;
        height: 500px;
    }
</style>

<!-- Resources -->
<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/dark.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>

<script>
    function greenTheme(target) {
        if (target instanceof am4core.ColorSet) {
            target.list = [
                am4core.color("#6bff72"),
                am4core.color("#79f29c"),
                am4core.color("#60db83"),
                am4core.color("#4fd173"),
                am4core.color("#32a852"),
                am4core.color("#60db83"),
                am4core.color("#2ebf58"),
                am4core.color("#1cad46"),
                am4core.color("#0f9636"),
                am4core.color("#3fcc35"),
                am4core.color("#24ad1a"),
                am4core.color("#148a0b"),
                am4core.color("#085202"),
                am4core.color("#0d4f08")
            ];
        }
    }

    function redTheme(target) {
        if (target instanceof am4core.ColorSet) {
            target.list = [
                am4core.color("#ff8989"),
                am4core.color("#f87070"),
                am4core.color("#d96262"),
                am4core.color("#ba5454"),
                am4core.color("#9b4646"),
                am4core.color("#7c3838"),
                am4core.color("#F54444"),
                am4core.color("#B83333"),
                am4core.color("#992B2B"),
                am4core.color("#7A2222"),
                am4core.color("#5C1A1A"),
                am4core.color("#E82929"),
                am4core.color("#AE1F1F"),
                am4core.color("#911A1A"),
                am4core.color("#741515")
            ];
        }
    }

    // BUDGET PERCENT CHART
    var budgetPercent = 0;
    am4core.ready(function() {
        am4core.useTheme(am4themes_animated);

        var chart = am4core.create("budgetProgress", am4charts.XYChart);

        let i = 0;
        var incomeTotal = 0;
        var expensesTotal = 0;
        {{{income}}}.forEach(element =>{
            var incomeToAdd = parseFloat(element.amount.replace(/\$/g, ''));
            incomeTotal += incomeToAdd;
            i++;
        });
        let j = 0;
        {{{expenses}}}.forEach(element =>{
            var expenseToAdd = parseFloat(element.amount.replace(/\$/g, ''));
            expensesTotal += expenseToAdd;
            j++;
        });
        budgetRemainingPercent = ({{budgetingGoal}} + incomeTotal - expensesTotal)/{{budgetingGoal}} * 100;
        var budgetSavedPercent = incomeTotal/{{budgetingGoal}}*100;
        var expensesPercent = expensesTotal/{{budgetingGoal}}*100;

        // Add data
        chart.data = [{
            "category": "3",
            "from": 0,
            "to": budgetPercent,
            "name": "Budget",
            "fill": am4core.color("#9e9e9e")
            }, {
            "category": "2",
            "from": 0,
            "to": expensesPercent,
            "name": "Expenses",
            "fill": am4core.color("#cd213b")
            }, {
            "category": "1",
            "from": 0,
            "to": incomePercent,
            "name": "Income",
            "fill": am4core.color("#0ca948")
        }];

        // Create axes
        var yAxis = chart.yAxes.push(new am4charts.CategoryAxis());
        yAxis.dataFields.category = "category";
        yAxis.renderer.grid.template.disabled = true;
        yAxis.renderer.labels.template.disabled = true;

        var xAxis = chart.xAxes.push(new am4charts.ValueAxis());
        xAxis.renderer.grid.template.disabled = true;
        xAxis.renderer.grid.template.disabled = true;
        xAxis.renderer.labels.template.disabled = true;
        {{!-- xAxis.min = 0; --}}
        {{!-- xAxis.max = 100; --}}

        // Create series
        var series = chart.series.push(new am4charts.ColumnSeries());
        series.dataFields.valueX = "to";
        series.dataFields.openValueX = "from";
        series.dataFields.categoryY = "category";
        series.columns.template.propertyFields.fill = "fill";
        series.columns.template.strokeOpacity = 0;
        series.columns.template.height = am4core.percent(100);

        // Ranges/labels
        chart.events.on("beforedatavalidated", function(ev) {
            var data = chart.data;
            for(var i = 0; i < data.length; i++) {
                var range = xAxis.axisRanges.create();
                range.value = data[i].to;
                range.label.text = data[i].to.toFixed(2) + "%";
                range.label.horizontalCenter = "right";
                range.label.paddingLeft = 5;
                range.label.paddingTop = 5;
                range.label.fontSize = 10;
                range.grid.strokeOpacity = 0.2;
                range.tick.length = 18;
                range.tick.strokeOpacity = 0.2;
            }
        });

        // Legend
        var legend = new am4charts.Legend();
        legend.parent = chart.chartContainer;
        legend.itemContainers.template.clickable = false;
        legend.itemContainers.template.focusable = false;
        legend.itemContainers.template.cursorOverStyle = am4core.MouseCursorStyle.default;
        legend.align = "right";
        legend.data = chart.data;

    });

    // INCOME PIE CHART
    am4core.ready(function() {
        am4core.useTheme(greenTheme);
        am4core.useTheme(am4themes_animated);

        // Create chart instance
        var chart = am4core.create("pieIncome", am4charts.PieChart);

        let i = 0;
        {{{income}}}.forEach(element =>{
            chart.data[i] = {
                "type": element.type,
                "amount": element.amount
            }
            i++;
        });

        // Add and configure Series
        var pieSeries = chart.series.push(new am4charts.PieSeries());
        pieSeries.dataFields.value = "amount";
        pieSeries.dataFields.category = "type";
        pieSeries.slices.template.stroke = am4core.color("#fff");
        pieSeries.slices.template.strokeWidth = 2;
        pieSeries.slices.template.strokeOpacity = 1;
        pieSeries.labels.template.fill = am4core.color("#000");
        pieSeries.slices.template.tooltipText = "{category}: ${value.formatNumber('#.##')}";

        // This creates initial animation
        pieSeries.hiddenState.properties.opacity = 1;
        pieSeries.hiddenState.properties.endAngle = -90;
        pieSeries.hiddenState.properties.startAngle = -90;

        am4core.unuseTheme(greenTheme);
    });

    // INCOME TREEMAP
    am4core.ready(function() {
        am4core.useTheme(greenTheme);
        am4core.useTheme(am4themes_animated);

        // create chart
        var chart = am4core.create("treeIncome", am4charts.TreeMap);
        let i = 0;
        {{{income}}}.forEach(element =>{
            chart.data[i] = {
                "type": element.type,
                "amount": element.amount
            }
            i++;
        });

        /* Define data fields */
        chart.dataFields.value = "amount";
        chart.dataFields.name = "type";
        chart.dataFields.color = "color";

        chart.zoomable = false;

        /* Configure top-level series */
        var level1 = chart.seriesTemplates.create("0");
        var level1_column = level1.columns.template;
        level1_column.column.cornerRadius(10, 10, 10, 10);
        level1_column.fillOpacity = 0.8;
        level1_column.stroke = am4core.color("#fff");
        level1_column.strokeWidth = 5;
        level1_column.strokeOpacity = 1;

        /* Add bullet labels */
        var level1_bullet = level1.bullets.push(new am4charts.LabelBullet());
        level1_bullet.locationY = 0.5;
        level1_bullet.locationX = 0.5;
        level1_bullet.label.text = "{name}";
        level1_bullet.label.fill = am4core.color("#000");

        am4core.unuseTheme(greenTheme);
    });

    // EXPENSES PIE CHART
    am4core.ready(function() {
        am4core.useTheme(redTheme);
        am4core.useTheme(am4themes_animated);

        // Create chart instance
        var chart = am4core.create("pieExpenses", am4charts.PieChart);

        let i = 0;
        {{{expenses}}}.forEach(element =>{
            chart.data[i] = {
                "type": element.type,
                "amount": element.amount
            }
            i++;
        });

        // Add and configure Series
        var pieSeries = chart.series.push(new am4charts.PieSeries());
        pieSeries.dataFields.value = "amount";
        pieSeries.dataFields.category = "type";
        pieSeries.slices.template.stroke = am4core.color("#fff");
        pieSeries.slices.template.strokeWidth = 2;
        pieSeries.slices.template.strokeOpacity = 1;
        pieSeries.labels.template.fill = am4core.color("#000");
        pieSeries.slices.template.tooltipText = "{category}: ${value.formatNumber('#.##')}";

        // This creates initial animation
        pieSeries.hiddenState.properties.opacity = 1;
        pieSeries.hiddenState.properties.endAngle = -90;
        pieSeries.hiddenState.properties.startAngle = -90;

        am4core.unuseTheme(redTheme);
    });

    // EXPENSE TREEMAP
    am4core.ready(function() {
        am4core.useTheme(redTheme);
        am4core.useTheme(am4themes_animated);

        // create chart
        var chart = am4core.create("treeExpenses", am4charts.TreeMap);
        let i = 0;
        {{{expenses}}}.forEach(element =>{
            chart.data[i] = {
                "type": element.type,
                "amount": element.amount
            }
            i++;
        });

        /* Define data fields */
        chart.dataFields.value = "amount";
        chart.dataFields.name = "type";
        chart.dataFields.color = "color";

        chart.zoomable = false;

        /* Configure top-level series */
        var level1 = chart.seriesTemplates.create("0");
        var level1_column = level1.columns.template;
        level1_column.column.cornerRadius(10, 10, 10, 10);
        level1_column.fillOpacity = 0.8;
        level1_column.stroke = am4core.color("#fff");
        level1_column.strokeWidth = 5;
        level1_column.strokeOpacity = 1;

        /* Add bullet labels */
        var level1_bullet = level1.bullets.push(new am4charts.LabelBullet());
        level1_bullet.locationY = 0.5;
        level1_bullet.locationX = 0.5;
        level1_bullet.label.text = "{name}";
        level1_bullet.label.fill = am4core.color("#000");

        am4core.unuseTheme(redTheme);
    });
</script>

<div>{{> header}}</div>

<div class="home">
    <h1>{{firstname}}'s Dashboard</h1>

    <div class="budget-goal">
        <h3>Your Monthly Budgeting Goal:</h3>
        <h4>${{budgetingGoal}}</h4>
    </div>

    <div class="appointment">
        <h1>Appointments</h1>
        {{#if appointments}}
            <p>Here are the details regarding your scheduled appointment with the following financial managers:</p>
            {{#each appointments}}
                <div class="appointment-info">
                    <h4>Financial Advisor's name: </h4>
                    <p>{{financialUsername}}</p>
                    <h4>Appointment Time: </h4>
                    <p>{{bookingTime}}</p>
                    <h4>Financial Advisor's email: </h4>
                    <p>{{this.email}}</p>
                </div>
            {{/each}}
        {{else}}
            <p>You currently don't have any appointments.</p>
            <br>
        {{/if}}
    </div>

    <div class="view-transactions">
        <form action="/view-transactions" method="get">
            <label>To view your transactions, click on 'View Transactions'.</label>
            <button type="submit" value="View Transactions"/>View Transactions</button>
        </form>
    </div>

    <div class="add-view-options">
        <div class="add-data">
            <form action="/transaction" method="get">
                <label>To add income and expenses, click on 'Add Data'.</label>
                <button type="submit" value="Add data"/>Add Data</button>
            </form>
        </div>
    </div>

    <div>
        <h3>Budget Progress</h3>
        <div id="budgetProgress"></div>
    </div>

    <div class="row">
        <div class="col-6">
            <h3>Income</h3>
            <div class="tab">
                <button class="tablinks" onclick="openTabIncome(event, 'Pie')">Pie</button>
                <button class="tablinks" onclick="openTabIncome(event, 'Treemap')">Treemap</button>
                </div>

                <div id="Pie" class="tabcontent" style="display: block">
                <h3>Pie</h3>
                <p>Income as a Pie chart</p>
                <div id="pieIncome"></div>
                </div>

                <div id="Treemap" class="tabcontent">
                <h3>Treemap</h3>
                <p>Income as a Treemap</p>
                <div id="treeIncome"></div>
            </div>
        </div>
        <div class="col-6">
            <h3>Expenses</h3>
            <div class="tab">
                <button class="tablinks" onclick="openTabExpense(event, 'PieExpense')">Pie</button>
                <button class="tablinks" onclick="openTabExpense(event, 'TreemapExpense')">Treemap</button>
                </div>

                <div id="PieExpense" class="tabcontent2" style="display: block">
                <h3>Pie</h3>
                <p>Expenses as a Pie chart</p>
                <div id="pieExpenses"></div>
                </div>

                <div id="TreemapExpense" class="tabcontent2">
                <h3>Treemap</h3>
                <p>Expenses as a Treemap</p>
                <div id="treeExpenses"></div>
            </div>
        </div>

        <div class="col-6 mx-auto">
            <h3>Suggested Budget Goal</h3>
                <p style="colour:black;font-size:11px;">*Note that you must first book an appointment with a financial advisor to have suggested budget goals*</p> 
            <div class="suggestGoal">
                <form action="/suggestBudgetingGoal" method="post">
                    <button name="suggestBudgetingGoal" type="submit">Suggested Budget Goal</button>
                </form>
            </div>
        </div>


        <div class="col-12 mx-auto">
        <div style="right:2px; top: 800px">
            <h9>Comments/Feedback</h9>
            <div class="feedback">
                <form action="/feedback" method="post">
                    <textarea id="note" name="note" rows="1" cols="50" wrap="physical">   
                    </textarea>
                    <button name="feedback" type="submit">feedback</button>
                </form>
            </div>
        </div>
        </div>

    </div>  
</div>

<script>
function openTabIncome(evt, chartType) {
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(chartType).style.display = "block";
  evt.currentTarget.className += " active";
}
</script>
<script>
function openTabExpense(evt, chartType) {
  var i, tabcontent, tablinks;
  tabcontent = document.getElementsByClassName("tabcontent2");
  for (i = 0; i < tabcontent.length; i++) {
    tabcontent[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablinks");
  for (i = 0; i < tablinks.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" active", "");
  }
  document.getElementById(chartType).style.display = "block";
  evt.currentTarget.className += " active";
}
</script>